squash 84c38a3 yml
squash d83ac80 yml1.1
squash 02418d8 yml1.2
squash 85128b1 yml1.3
squash 947f55a yml1.4
squash 850362e yml1.5
squash 017e5ad yml1.6
squash 61ef51f yml1.7
pick 4929f26 vector test
pick 00847db GetHashCode
pick 405cb4a VectorTest1.1
pick 151659f hash
pick 2eee79a gitignore
pick 48ad9c5 gitignore1.1
pick 4ad2a90 vector
pick ffe0a3c vector1.2
pick f4d81c3 vector1.3
pick 93e5194 format

# Rebase f817025..61ef51f onto f817025 (18 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
